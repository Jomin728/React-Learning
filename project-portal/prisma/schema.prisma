// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://project_portal_20va_user:fdzpzwF1JnKxbWPUEQw0YIBGlIlDzGx1@dpg-cqosnkg8fa8c73c1mblg-a.singapore-postgres.render.com/project_portal_20va"
              
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  role         String?
  accounts      Account[]
  sessions      Session[]
  hashedPassword String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectsManaged Project[]
  applications Applicants[]
  projectEndDate DateTime?
  band String?
  certification String[]
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

model Project {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectTitle String
  projectDescription String
  tags String[]
  projectContact String
  managerEmail String
  creatorId String
  creator User @relation(fields:[creatorId],references:[id],onDelete:NoAction)
  projectLocation String
  account String
  applicants appliedToProject[]

}

model Applicants {
  id String @id @default(cuid())
  appliedDate DateTime @default(now())
  status String
  applicantUserId String
  appliedUser User @relation(fields:[applicantUserId],references:[id],onDelete:NoAction)
  projectsApplied appliedToProject[]
}

model appliedToProject{
  project Project @relation(fields:[projectId],references:[id])
  projectId String
  applicant Applicants @relation(fields:[applicantId],references:[id])
  applicantId String
  assignedAt DateTime @default(now())
  @@id([projectId, applicantId])
}

enum Role {
  USER
  ADMIN
}